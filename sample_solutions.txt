Day 1 Exercises:

Exercise 1:
function main(n) {
  moveRight();
  moveRight();
  useBlue();
  draw();
} 

Exercise 2:
function main(n) {
  moveRight();
  moveRight();
  erase();
}


Day 2 Exercises:

Exercise 1:
var initial_state = ['b', 'b', 'b', 'b', ‘b’];

function main(n) {
  moveRight();
  erase();
  moveRight();
  moveRight();
  erase();
} 

Exercise 2:
var initial_state = [ 'g', 'g', 'g', '.', '.' ];

function main(n) {
  moveRight();
  useBlue();
  draw();
  moveRight();
  moveRight();
  draw();
} 

Exercise 3:
note: initial_state can be: [ '.', '.', '.', '.', '.' ] or [ ‘b’, '.', '.', '.', '.' ] or [ ‘g’, '.', '.', '.', '.' ].  Below I use the all blanks as an example.

var initial_state = [ '.', '.', '.', '.', '.' ];
var firstEntry = initial_state[0];

function main(n) {
  erase();
  moveRight();
  moveRight();
  moveRight();
  moveRight();
  if (firstEntry==="g"){
    useGreen();
    draw();
  }else if(firstEntry==="b") {
    useBlue();
    draw();
  }else {
    erase();
  }
} 

Day 3 Exercises:
Exercise 1:
var initial_state = [ '.', '.', '.', '.', '.' ];

function main(n) {
  useBlue();
  for (var i=0; i<initial_state.length; i++) {
    draw();
    moveRight();
  }
} 


Exercise 2:
var initial_state = [ 'b', '.', '.', '.', '.' ];
//note: the initial_state could also be: [ ‘g’, '.', '.', '.', '.' ];
function main(n) {
  if(onBlue()) {
    useBlue();
  } else if(onGreen()) {
    useGreen();
  } else {
    return;
  }

  for (var i=0; i<initial_state.length; i++) {
    draw();
    moveRight();
  }
}


Exercise 3:
var initial_state = [ '.', '.', '.', '.', '.' ];

function main(n) {
  useBlue();
  for(var i=1; i<=n; i++) {
    draw();
    moveRight();
  }
} 

Exercise 4:
var initial_state = [ 'b', 'b', 'b', 'b', 'b' ];

function main(n) {
  for(var i=2; i<initial_state.length+2; i++) {
    if(i%2===0) {
      erase();
    }
    moveRight();
  }
} 

Exercise 5:
var initial_state = [ 'b', 'b', 'b', 'b', 'b' ];

function main(n) {
  for(var i=2; i<initial_state.length+2; i++) {
    if(i%2===1) {
      erase();
    }
    moveRight();
  }
} 

Exercise 6:
var initial_state = [ 'b', 'b', 'b', 'b', 'b' ];

function main(n) {
  for(var i=2; i<initial_state.length+2; i++) {
    if(i%2===1) {
      erase();
    }
    moveRight();
  }
} 


Day 4 Exercises:
Exercise 1:
var initial_state = [ '.', '.', 'b', '.', '.' ];

function main(n) {
  for (var i=0; i<initial_state.length; i++) {
      if (!onBlue() && !onGreen()) {
        moveRight();
      } else {
        if(onBlue()) {
          useBlue();
        } else {
          useGreen();
        }
        while (i<initial_state.length) {
          draw();
          moveRight();
          i++;
        }
        break; 
      }

  }
} 

Exercise 2:
var initial_state = [ 'b', '.', 'g', '.', 'b' ];
//note: var initial_state = [ 'b', ‘g’, 'g', ‘b’, 'b' ]; is also an option

function main(n) {
  for (var i=0; i<initial_state.length; i++) {
      if (!onBlue() && !onGreen()) {
        moveRight();
      } else {
        if(onBlue()) {
          useGreen();
        } else {
          useBlue();
        }
        draw();
        moveRight();
      }
    }
  }

Exercise 3:
var initial_state = [ 'b', 'g', 'g', '.', 'g' ];
function main(n) {
  for (var i=initial_state.length-1; i>=0; i--) {
    if(initial_state[i]==='g') {
      useGreen();
      draw();
    } else if (initial_state[i]==='b') {
      useBlue();
      draw();
    } else {
      erase();
    }
    moveRight();
  }
}

Day 5:
Exercise 1:
var initial_state = [ 'g', 'b', '.', '.', 'g' ];
//note: initial_state could also be:  ['.', '.', 'b', '.', '.']
function main(n) {
  useBlue();
  var useNext=false;
  for (var i=0; i<initial_state.length; i++) {
    if(useNext) {
      draw();
      break;
    }
    if(onBlue()) {
      erase();
      useNext = true;
    }
    moveRight();
  }
}

Exercise 2:
var initial_state = [ 'g', 'b', 'b', '.', '.' ];
//note: initial_state could also be [ 'g', 'b', ‘.’, '.', '.' ]
function main(n) {
  for (var i=0; i<initial_state.length; i++) {
    if(onBlue() || onGreen()) {
      moveLeft();
      erase();
      moveRight();
    }
    moveRight();
  }
}

Exercise 3:
var initial_state = [ 'b', '.', 'b', '.', '.' ];
function main(n) {
  var blueCounter = 0;
  useBlue();
  for (var i=0; i<initial_state.length; i++) {
    if(onBlue()) {
      erase();
      blueCounter++;
    }
    moveRight();
  }
  for (var x=1; x<=blueCounter; x++) {
    draw();
    moveLeft();
  }
}

Exercise 4:
var initial_state = [ '.', 'b', 'b', '.', 'b' ];
function main(n) {
  var blueCounter = 0;
  useBlue();
  for (var i=0; i<initial_state.length; i++) {
    if(onBlue()) {
      erase();
      blueCounter++;
    }
    moveRight();
  }
  for (var y=1; y<=(initial_state.length - blueCounter); y++) {
    moveLeft();
  }
  
  for (var x=1; x<=blueCounter; x++) {
    draw();
    moveLeft();
  }
}